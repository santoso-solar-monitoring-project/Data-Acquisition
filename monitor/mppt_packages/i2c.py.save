import smbus2
import time


class I2C:

    def __init__(self, address=0x04):
        # for RPI version 1, use “bus = smbus.SMBus(0)”
        self._bus = smbus2.SMBus(bus=1)

        # This is the address we setup in the Arduino Program
        self._address = address

    def send_data(self, led, pwm):
        led = max(min(led, 15), 0)
        pwm = max(min(pwm, 1), -1)
        value = (pwm + 1) * 16 + led
        uno_error = 0
        for error_count in range(5):
            try:
                self._bus.write_byte(self._address, int(value))
            except (OSError, IOError):
                time.sleep(0.15)
                uno_error = 1
                continue
            uno_error = 0
            break
        # bus.write_byte_data(address, 0, value)
        #if uno_error:
            #raise IOError("Couldn't reach Arduino")
        return uno_error

    def set_pwm(self, pwm):
        pwm = max(min(pwm, 255), 0)
        for error_count in range(5):
            try:
                self._bus.write_byte(self._address, int(255))
                
            except:
                time.sleep(0.15)
                uno_error = 1
                continue
            uno_error = 0
            break

    def read_data(self):
        uno_error = 0
        for error_count in range(5):
            try:
                self._bus.read_byte(self._address)
            except (OSError, IOError):
                time.sleep(0.15)
                uno_error = 1
                continue
            uno_error = 0
            break
        number = self._bus.read_byte(self._address)
        # number = bus.read_byte_data(address, 1)
        if uno_error:
            return uno_error
        return number
