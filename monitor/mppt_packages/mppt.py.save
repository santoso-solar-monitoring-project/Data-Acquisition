from .adc import ADC_Reader
from enum import Enum
from multiprocessing import Value

class Modes(Enum):
    DEBUG = -1
    OBSERVE = 0
    CONDUCTANCE = 1


class MPPT(object): #Classes without a defined (base_class) are abstract

    MAX_POWER = 400

    def __init__(self, adc, mode=Modes.DEBUG):
        self._v = 0
        self._i = 0
        self._p = 0
        self._v_old = 0
        self._i_old = 0
        self._p_old = 0
        if type(mode) == type(0): #It's an int, we need a Mode
            self._mode = Modes(mode)
        else:
            self._mode = mode
        self._debug = 0
        self._count = 0
        self._adc = adc

    def switch(self, mode):
        if type(mode) == type(0): #It's an int, we need a Mode
            self._mode = Modes(mode)
        else:
            self._mode = mode
        if self._mode == Modes.DEBUG:
            print("MPPT now in Debug Mode")
        # P&O
        elif self._mode == Modes.OBSERVE:
            print("MPPT now in Perturb and Observe Mode")
        # Inc Cond
        elif self._mode == Modes.CONDUCTANCE:
            print("MPPT now in Incremental Conductance Mode")

    def track(self):
        # Debug Mode
        if self._mode == Modes.DEBUG:
            return self.mppt_debug()
        # P&O
        elif self._mode == Modes.OBSERVE:
            return self.mppt_perturb_observe()
        # Inc Cond
        elif self._mode == Modes.CONDUCTANCE:
            return self.mppt_incremental_conductance()

    def read_new_values(self):
        # Zach do here the adc stuff kinda
        # self._voltage = read
        # self._current = read
        # self._power = self._voltage * self._current
	try:







self._v, self._i = self._adc.sample()
        except IOError:
            print("...Using old values...")
            self._v = self._v_old
            self._i = self._i_old

        self._v *= 10
